<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://WQJ-ese.github.io</id>
    <title>zhdexs</title>
    <updated>2020-11-18T10:26:32.804Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://WQJ-ese.github.io"/>
    <link rel="self" href="https://WQJ-ese.github.io/atom.xml"/>
    <subtitle>zhdexs</subtitle>
    <logo>https://WQJ-ese.github.io/images/avatar.png</logo>
    <icon>https://WQJ-ese.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, zhdexs</rights>
    <entry>
        <title type="html"><![CDATA[位运算]]></title>
        <id>https://WQJ-ese.github.io/post/wei-yun-suan/</id>
        <link href="https://WQJ-ese.github.io/post/wei-yun-suan/">
        </link>
        <updated>2020-11-18T10:25:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1位运算概述">1.位运算概述<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#3891506565"> </a></h2>
<p>从现代计算机中所有的数据二进制的形式存储在设备中。即0、1两种状态，计算机对二进制数据进行的运算(+、-、*、/)都是叫位运算，即将符号位共同参与运算的运算。</p>
<p>口说无凭，举一个简单的例子来看下CPU是如何进行计算的，比如这行代码：</p>
<pre><code>int a = 35;
int b = 47;
int c = a + b;
</code></pre>
<p>计算两个数的和，因为在计算机中都是以二进制来进行运算，所以上面我们所给的int变量会在机器内部先转换为二进制在进行相加：</p>
<pre><code>35:  0 0 1 0 0 0 1 1
47:  0 0 1 0 1 1 1 1
————————————————————
82:  0 1 0 1 0 0 1 0
</code></pre>
<p>所以，相比在代码中直接使用(+、-、*、/)运算符，合理的运用位运算更能显著提高代码在机器上的执行效率。</p>
<h2 id="2位运算概览">2.位运算概览</h2>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
<th>运算规则</th>
</tr>
</thead>
<tbody>
<tr>
<td>&amp;</td>
<td>与</td>
<td>两个位都为1时，结果才为1</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>两个位都为0时，结果才为0</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>两个位相同为0，相异为1</td>
</tr>
<tr>
<td>~</td>
<td>取反</td>
<td>0变1，1变0</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移</td>
<td>各二进位全部左移若干位，高位丢弃，低位补0</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移</td>
<td>各二进位全部右移若干位，对无符号数，高位补0，有符号数，各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</td>
</tr>
</tbody>
</table>
<h2 id="3按位与运算符">3.按位与运算符（&amp;）<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#682804149">#</a></h2>
<p>定义：参加运算的两个数据，按二进制位进行“与”运算。</p>
<p>运算规则：</p>
<pre><code>0&amp;0=0  0&amp;1=0  1&amp;0=0  1&amp;1=1
</code></pre>
<p>总结：两位同时为<strong>1</strong>，结果才为<strong>1</strong>，否则结果为<strong>0</strong>。</p>
<p>例如：<code>3&amp;5</code> 即 0000 0011&amp; 0000 0101 = 0000 0001，因此 3&amp;5 的值得1。</p>
<p>注意：负数按<strong>补码</strong>形式参加按位与运算。</p>
<p>与运算的用途：</p>
<p><strong>1）清零</strong></p>
<p>如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</p>
<p><strong>2）取一个数的指定位</strong></p>
<p>比如取数 X=1010 1110 的低4位，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位与运算（X&amp;Y=0000 1110）即可得到X的指定位。</p>
<p><strong>3）判断奇偶</strong></p>
<p>只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用<code>if ((a &amp; 1) == 0)</code>代替<code>if (a % 2 == 0)</code>来判断a是不是偶数。</p>
<h2 id="4按位或运算符">4.按位或运算符（|）<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#3267481343"> </a></h2>
<p>定义：参加运算的两个对象，按二进制位进行“或”运算。</p>
<p>运算规则：</p>
<pre><code>0|0=0  0|1=1  1|0=1  1|1=1
</code></pre>
<p>总结：参加运算的两个对象只要有一个为1，其值为1。</p>
<p>例如：<code>3|5</code>即 0000 0011| 0000 0101 = 0000 0111，因此，<code>3|5</code>的值得7。</p>
<p>注意：负数按<strong>补码</strong>形式参加按位或运算。</p>
<p>或运算的用途：</p>
<p><strong>1）常用来对一个数据的某些位设置为1</strong></p>
<p>比如将数 X=1010 1110 的低4位设置为1，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行按位或运算（X|Y=1010 1111）即可得到。</p>
<h2 id="5异或运算符">5.异或运算符（^）<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#4028003129"> </a></h2>
<p>定义：参加运算的两个数据，按二进制位进行“异或”运算。</p>
<p>运算规则：</p>
<pre><code>0^0=0  0^1=1  1^0=1  1^1=0
</code></pre>
<p>总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。</p>
<p>异或的几条性质:</p>
<p>1、交换律</p>
<p>2、结合律 (a<sup>b)</sup>c == a<sup>(b</sup>c)</p>
<p>3、对于任何数x，都有 x<sup>x=0，x</sup>0=x</p>
<p>4、自反性: a<sup>b</sup>b=a^0=a;</p>
<p>异或运算的用途：</p>
<p><strong>1）翻转指定位</strong></p>
<p>比如将数 X=1010 1110 的低4位进行翻转，只需要另找一个数Y，令Y的低4位为1，其余位为0，即Y=0000 1111，然后将X与Y进行异或运算（X^Y=1010 0001）即可得到。</p>
<p><strong>2）与0相异或值不变</strong></p>
<p>例如：1010 1110 ^ 0000 0000 = 1010 1110</p>
<p><strong>3）交换两个数</strong></p>
<p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" loading="lazy">](javascript:void(0)😉</p>
<pre><code>void Swap(int &amp;a, int &amp;b){
    if (a != b){
        a ^= b;
        b ^= a;
        a ^= b;
    }
}
</code></pre>
<p>[<img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码" loading="lazy">](javascript:void(0)😉</p>
<h2 id="6取反运算符-~">6.取反运算符 (~)<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#909117224"> </a></h2>
<p>定义：参加运算的一个数据，按二进制进行“取反”运算。<br>
运算规则：</p>
<pre><code>~1=0
~0=1
</code></pre>
<p>总结：对一个二进制数按位取反，即将0变1，1变0。</p>
<p>异或运算的用途：</p>
<p><strong>1）使一个数的最低位为零</strong></p>
<p>使a的最低位为0，可以表示为：<code>a &amp; ~1</code>。~1的值为 1111 1111 1111 1110，再按&quot;与&quot;运算，最低位一定为0。因为“ ~”运算符的优先级比算术运算符、关系运算符、逻辑运算符和其他运算符都高。</p>
<h2 id="7左移运算符">7.左移运算符（&lt;&lt;）<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#1958716193"> </a></h2>
<p>定义：将一个运算对象的各二进制位全部左移若干位（左边的二进制位丢弃，右边补0）。</p>
<p>设 a=1010 1110，<code>a = a&lt;&lt; 2</code> 将a的二进制位左移2位、右补0，即得a=1011 1000。</p>
<p>若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</p>
<h2 id="8右移运算符">8.右移运算符（&gt;&gt;）<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#2076073887"> </a></h2>
<p>定义：将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</p>
<p>例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。</p>
<p>操作数每右移一位，相当于该数除以2。</p>
<h2 id="10复合赋值运算符">10.复合赋值运算符<a href="https://www.cnblogs.com/yueshutong/p/11244534.html#1403549556"> </a></h2>
<p>位运算符与赋值运算符结合，组成新的复合赋值运算符，它们是：</p>
<pre><code>&amp;=`    例：`a&amp;=b  `相当于   `a=a&amp;b
|=`    例：`a|=b  `相当于   `a=a|b
&gt;&gt;=`   例：`a&gt;&gt;=b  `相当于   `a=a&gt;&gt;b
&lt;&lt;=`   例：`a&lt;&lt;=b`   相当于   `a=a&lt;&lt;b
^=`    例：`a^=b  `相当`于  a=a^b
</code></pre>
<p>运算规则：和前面讲的复合赋值运算符的运算规则相似。</p>
<p>**不同长度的数据进行位运算：**如果两个不同长度的数据进行位运算时，系统会将二者按右端对齐，然后进行位运算。</p>
<p>以“与运算”为例说明如下：我们知道在C语言中long型占4个字节，int型占2个字节，如果一个long型数据与一个int型数据进行“与运算“，右端对齐后，左边不足的位依下面三种情况补足，</p>
<p>1）如果整型数据为正数，左边补16个0。</p>
<p>2）如果整型数据为负数，左边补16个1。</p>
<p>3）如果整形数据为无符号数，左边也补16个0。</p>
<p>如：long a=123；int b=1；计算a&amp; b。</p>
<p>如：long a=123；int b=-1；计算a&amp; b。</p>
<p>如：long a=123；unsigned intb=1；计算a &amp; b。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[About]]></title>
        <id>https://WQJ-ese.github.io/post/about/</id>
        <link href="https://WQJ-ese.github.io/post/about/">
        </link>
        <updated>2020-11-16T13:04:22.000Z</updated>
        <content type="html"><![CDATA[<p>Wang Qingju made for Zhu Hao friendship.</p>
]]></content>
    </entry>
</feed>